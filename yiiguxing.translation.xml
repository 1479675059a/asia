<application>
  <component name="AppStorage">
    <histories>
      <item value="java.lang public abstract class ClassLoader&#10;extends Object&#10;A class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a &quot;class file&quot; of that name from a file system.&#10;Every Class object contains a reference to the ClassLoader that defined it.&#10;Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by Class.getClassLoader() is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader.&#10;Applications implement subclasses of ClassLoader in order to extend the manner in which the Java virtual machine dynamically loads classes.&#10;Class loaders may typically be used by security managers to indicate security domains.&#10;The ClassLoader class uses a delegation model to search for classes and resources. Each instance of ClassLoader has an associated parent class loader. When requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the &quot;bootstrap class loader&quot;, does not itself have a parent but may serve as the parent of a ClassLoader instance.&#10;Class loaders that support concurrent loading of classes are known as parallel capable class loaders and are required to register themselves at their class initialization time by invoking the ClassLoader.registerAsParallelCapable method. Note that the ClassLoader class is registered as parallel capable by default. However, its subclasses still need to register themselves if they are parallel capable. In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see loadClass methods).&#10;Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the virtual machine loads classes from the directory defined by the CLASSPATH environment variable.&#10;However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method defineClass converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using Class.newInstance.&#10;The methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java virtual machine invokes the loadClass method of the class loader that originally created the class.&#10;For example, an application could create a network class loader to download class files from a server. Sample code might look like: ClassLoader loader = new NetworkClassLoader(host, port); Object main = loader.loadClass(&quot;Main&quot;, true).newInstance(); . . . The network class loader subclass must define the methods findClass and loadClassData to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method defineClass to create a class instance. A sample implementation is: class NetworkClassLoader extends ClassLoader { String host; int port; public Class findClass(String name) { byte[] b = loadClassData(name); return defineClass(name, b, 0, b.length); } private byte[] loadClassData(String name) { // load the class data from the connection . . . } } Binary names&#10;Any class name provided as a String parameter to methods in ClassLoader must be a binary name as defined by The Java™ Language Specification.&#10;Examples of valid class names include: &quot;java.lang.String&quot; &quot;javax.swing.JSpinner$DefaultEditor&quot; &quot;java.security.KeyStore$Builder$FileBuilder$1&quot; &quot;java.net.URLClassLoader$3$1&quot;" />
      <item value="A class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a &quot;class file&quot; of that name from a file system. Every Class object contains a reference to the ClassLoader that defined it. Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by Class.getClassLoader() is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader. Applications implement subclasses of ClassLoader in order to extend the manner in which the Java virtual machine dynamically loads classes. Class loaders may typically be used by security managers to indicate security domains. The ClassLoader class uses a delegation model to search for classes and resources. Each instance of ClassLoader has an associated parent class loader. When requested to find a class or resource, a ClassLoader instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the &quot;bootstrap class loader&quot;, does not itself have a parent but may serve as the parent of a ClassLoader instance. Class loaders that support concurrent loading of classes are known as parallel capable class loaders and are required to register themselves at their class initialization time by invoking the ClassLoader.registerAsParallelCapable method. Note that the ClassLoader class is registered as parallel capable by default. However, its subclasses still need to register themselves if they are parallel capable. In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see loadClass methods). Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the virtual machine loads classes from the directory defined by the CLASSPATH environment variable. However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method defineClass converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using Class.newInstance. The methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java virtual machine invokes the loadClass method of the class loader that originally created the class. For example, an application could create a network class loader to download class files from a server. Sample code might look like: ClassLoader loader = new NetworkClassLoader(host, port); Object main = loader.loadClass(&quot;Main&quot;, true).newInstance(); . . . The network class loader subclass must define the methods findClass and loadClassData to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method defineClass to create a class instance. A sample implementation is:&#10;class NetworkClassLoader extends ClassLoader { String host; int port; public Class findClass(String name) { byte[] b = loadClassData(name); return defineClass(name, b, 0, b.length); } private byte[] loadClassData(String name) { // load the class data from the connection . . . }&#10;} Binary names&#10;Any class name provided as a String parameter to methods in ClassLoader must be a binary name as defined by The Java™ Language Specification. Examples of valid class names include: &quot;java.lang.String&quot; &quot;javax.swing.JSpinner$DefaultEditor&quot; &quot;java.security.KeyStore$Builder$FileBuilder$1&quot; &quot;java.net.URLClassLoader$3$1&quot;" />
      <item value="Metaspace" />
      <item value="迷宫问题" />
      <item value="工厂" />
      <item value="VM hardcoded the offset of this field, thus all new fields" />
      <item value="hardcoded" />
      <item value="delegation" />
      <item value="中缀转后缀" />
      <item value="设计模式" />
      <item value="单例模式" />
      <item value="后缀表达式" />
      <item value="bootstrap" />
      <item value="交通工具" />
      <item value="单一职责原则" />
      <item value="单一职责" />
      <item value="计算器" />
      <item value="约瑟夫" />
      <item value="圆" />
      <item value="单向环形链表" />
      <item value="工厂模式" />
      <item value="reference" />
      <item value="前一个" />
      <item value="栈溢出" />
      <item value="Assertion" />
      <item value="Assert" />
      <item value="线程工厂" />
      <item value="类与类之间的关系" />
      <item value="调用这个常量的方法" />
      <item value="myParent static block" />
      <item value="倒数" />
      <item value="place " />
      <item value="静态方法" />
      <item value="类的实例化" />
      <item value="lecture" />
      <item value="lectrue" />
      <item value="类的加载,连接，与初始化" />
      <item value="单链表反转" />
      <item value=" 线程池" />
      <item value="消费" />
      <item value="包子" />
      <item value="生产" />
      <item value="馅" />
      <item value="资源" />
      <item value="等待唤醒机制" />
      <item value="线程状态" />
      <item value="查找" />
      <item value="有效" />
      <item value="卖票" />
      <item value="同步" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="85" />
        <entry key="ENGLISH" value="86" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
</application>